@startuml

interface Function{
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Variable{
    -variable: String
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Power{
    -functionA: Function
    -functionB: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Root{
    -functionA: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Multiplication{
    -functionA: Function
    -functionB: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Division{
    -functionA: Function
    -functionB: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Addition{
    -functionA: Function
    -functionB: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Subtraction{
    -functionA: Function
    -functionB: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class CalculateAbsolute{
    -function: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Association{
    -function: Function
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}

class Value{
    +value: Double
    +evaluate(): Double
    +evaluate(Map<String,Double> map): Double
    +getChildren(List<String> list): List<String>
    +listVariables(List<String> list): List<String>
    +print():  String
}



CalculateAbsolute .u.|> Function
Power .u.|> Function
Root .u.|> Function
Multiplication .u.|> Function
Division .u.|> Function
Addition ..|> Function
Subtraction ..|> Function
Variable ..|> Function
Value ..|> Function
Association ..|> Function
CalculateAbsolute *-- Function
Power *-- Function
Root *-- Function
Multiplication *-- Function
Division *-- Function
Addition *-- Function
Subtraction *-- Function


/'
    --|> herencia
    *-- composición
    o-- agregación
    --> asosiación
    ..> dependencia
    <|.. realización/implementación
'/
@enduml